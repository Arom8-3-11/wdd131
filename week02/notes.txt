JavaScript: Fundamental Programming Constructs:

Conditional Satements:
    IF statement: Executesa block of code if a specified condition is true.
    Example:
        if (condition) {
            //code to execute if the condition is true
        }
    condition is evaluated to boolean value, i.e., true/false.. writing condition statements is critical skill in programming. 
    The use of operators and expressions is a key concept in writing condition statements that solve programming problems.

    ELSE statement: Provides an alternative block of code to execute if the condition in the if statement is false.
    Example:
        if (condition) {
            // executes if condition is true
        }

        else {
            // executes if condition is false
        }

    ELSE If statement: this structure allows for the checking of multiple conditions in sequence.
    Example: 
        if (condition1) {
            //executes if condition1 is true
        }

        else if (condition2) {
            //executes if condition2 is true
        }

        else {
            //executes if none of the conditions are true
        }

Switch Statements: Provides a way to execute selective blocks of code based on the value of an expression.
    Example:
        switch (expression) {
            case value1:
                //executes if expression = value1
                break;
            case value2:
                //executes if expression = value2
                break;
            // ... more cases ...
            default:
                //executes if none of the cases match
        }

Looping Statements:
    FOR Loop: repeats a block of code a specified number of times.
    Example: 
        for (let i = 0; i < 19; i++) {
            //executes in each iteration
        }

    WHILE Loop: repeats a block of code as long as a specified condition is true.
    Example:
        while (condition) {
            //executes while the condition is true
        }

    forEach Loop: this loop structure is for arrays. It iterates over each element of the array.
    Example:
        array.forEach(fucntion(element) {
            //executes for each element
        })

        


JavaScript: DOM Manipulation
        "Document object model"
    

    The Event Reference attempts to maintain a list of the standard Events used in modern web browsers.

In general, we can distinguish events of different kinds based on the object emitting the event including:

    the window object, such as due to resizing the browser,
    the window.screen object, such as due to changes in device orientation,
    the document object, including the loading, modification, user interaction, and unloading of the page,
    the objects in the DOM (document object model) tree including user interactions or modifications,
    the XMLHttpRequest objects used for network requests, and
    the media objects such as audio and video, when the media stream players change state.

Some notable events are:

    the global object window emits an event called 'load' when the page has finished rendering, meaning that all resources have been downloaded and acted upon, so that the scripts have been run and the images displayed,
    the global object window emits an event called 'resize' when the height or the width of the browser window is changed by a user,
    the DOM object document representing the HTML document emits an event called 'DOMContentLoaded' when the document has finished loading,
    the DOM node objects such as div or button emit an event called 'click' when the user presses the mouse button while the mouse pointer is on top of the DOM node in the HTML page.



addEventListener #
target.addEventListener(type, listener [, options]);
How do we make something happen when a specific event happens? addEventListener. Let's say we had a button in our HTML. When the user clicks on that button with the mouse, we would like it to read the value of an input, and output it to another element.

Callbacks #
We have mentioned that in Javascript functions are special objects...but since they are objects we can do anything with functions that we can a normal object. This includes assigning functions to variables, and passing functions into other functions as arguments, as well as returning functions from functions.

When we pass a function into another function we call it a 'callback'. addEventListener is a good example. The second parameter (listener) that it is expecting should be a function. This function will get called when the event we are listening for happens.

HTML #
<input id="inputBox" type="text" />
<button id="submitButton">Submit</button>
<p id="output"></p>
Javascript #
const buttonElement = document.getElementById("submitButton");

function copyInput() {
  const inputElement = document.getElementById("inputBox");
  const outputElement = document.getElementById("output");
  outputElement.innerHTML = inputElement.value;
}
buttonElement.addEventListener("click", copyInput);
The Event object #
addEventListener will always pass an object containing information about the event that happened into your callback function. It contains a lot of very useful information. Run the code below and inspect the event that got logged out to the console.

// modify the copyInput callback to receive the event object
function copyInput(event) {
  // take a look at the event!
  console.log(event);
  const inputElement = document.getElementById("inputBox");
  const outputElement = document.getElementById("output");
  outputElement.innerHTML = inputElement.value;
}
A few properties of particular interest would be event.target, event.currentTarget, and event.type

Another example #
We saw how to respond to a 'click' event above. What about a key event? If you refer back to the Event Reference document from earlier we can find keydown and keyup events. With something like a click, we usually want to know if a specific thing has been clicked. A keyboard event however often is not specific to a particular element, so we will listen at the document level.

<p id="log"></p>
const log = document.querySelector("#log");

document.addEventListener("keydown", logKey);

function logKey(e) {
  // how do we know which key was pressed?
  console.log(e);
  // checkout e.code, e.key, and e.keyCode
  // what is the difference?
}









JS Debugging - What went wrong?
Types of Errors #
An error could be defined as something wrong with your code. Errors generally can be placed into two buckets:

Syntax Errors: Often spelling or other mis-typing errors where we try to use a defined variable or function that does not exist. These show up as error messages in the console, and are usually easier to fix.

Logic Errors: Logic errors happen when your code works...just not like you need it to. It doesn't give the correct output or result. There is often not a defined error message that shows which means that finding and fixing these is often harder.

Running and debugging Javascript in the Browser. #
Javascript was originally created to be run in a browser and much of it still is. Because of this we will focus on debugging techniques for the browser.

Open a sandbox folder up in your editor. In the sandbox folder create an html file called debugging.html with the html for a basic page. (Hint: In VS Code type ! in your blank .html file...then press the tab key. You are welcome...;)
Create a file called debugging.js
Add a script element to your debugging.html file. The script element is how we let the browser know that there is some Javascript code that it needs to fetch and execute.
There are a few special elements in HTML. They are special because the contents of those elements are not treated as HTML, but something different.

<script> and <style> are the most common of these special tags. In the case of <style> the contents are treated as CSS (which we won't talk about much in this course). For <script> the contents are treated as Javascript.

The <script> can be used in two ways: we can add the code we want executed inside of the element, ie:

<script>
  let myVar = 3;
</script>
...or we can put our Javascript code inside of a separate file and link it in:

<script src="debugging.js"></script>
This second method is considered best practice and is how you should run our Javascript. The other method is often used for quick proof-of-concept hacking, but the code will usually get moved into a JS file if the code is going to be kept.

Add the following code to your debugging.js file:
const PI = 3.14;
const radius = 3;
let area = 0;
area = radius * radius * pi;
radius = 4;
area = radius * radius * pi;
Open your HTML file in a browser. (If you are using VS Code and installed the LiveServer extension you can right click on the name of the file in VS Code and select the 'Open with LiveServer') There is nothing on the screen! This is normal...in our HTML we didn't ask for anything to be on the screen. Open up the developer tools and switch to the Console tab.

Notice that there are errors listed. These are syntax errors that will keep our code from running correctly until the are fixed.

Switch to the Sources tab in the developer tools. Click on the debugging.js file in the left pane. You should be able to see the code you wrote.

Click on the line number for line 1. It should add a blue arrow on it. We have just set a breakpoint. If you refresh the browser the code execution will now stop on line 1 at our breakpoint.
Debugging sources tab in developer tools

The Resume button should be blue at this point. That means the execution of our code is paused. At this point we could click the Resume button to resume the execution of the program, or Step over, or step into. Step into is for functions, which we don't have yet. so click the Step Over button to advance to the next line in the code.

Hover your mouse cursor over the word PI in the Sources tab. You should see a little popup with '3.14' show up. This indicates what the current value in that variable is. Do not underestimate how valuable this inspect ability is!

If you click Step Over a few more times we will get to the line with the first syntax error and our execution will end. (Resume button will no longer be a blue 'Play' button.)

Clicking on the line number for line 1 again will remove the breakpoint.




Debugging - Ponder activities.
Preparation #
You will need your editor open with some html and the code:

html #
<!-- debugging.html -->
<html>
  <head>
    <title>Debug Activities</title>
    <script src="debugging.js"></script>
  </head>
  <body></body>
</html>
Javascript #
const PI = 3.14;
const radius = 3;
let area = 0;
area = radius * radius * pi;
radius = 4;
area = radius * radius * pi;
These activities will be most effective if you try them first before you look at the solution. And after you do look at the solution...do not copy and paste the code. Read through it, try to understand what it is doing...then go fix your code.

Activity 1 #
We have a few errors to fix in the code above.

First we must address the initial syntax error: "pi is not defined". Why are we getting that error? Review the code and fix it.
Once that error is fixed we will find that there is another syntax error: "Assignment to constant variable." Fix this one as well.
After that the code runs with no errors. But there is no indication of whether it worked correctly. Insert some console.log() statements to review what is happening.
Solution 1
Activity 2 #
You may have noticed that have repeated lines of code in our example. This is usually a sign that we need a function. Let's refactor our code (programmer speak for change) by adding a function that will calculate the area of a circle if given a radius value.

Create a function called circleArea. In Javascript a simple function takes the form:
function circleArea(radius) {
  // code to complete our task here
}
Refactor (change) our code to make the function work. Use the code below:
const PI = 3.14;
let area = 0;
function circleArea(radius) {
  const area = radius * PI;
}
area = circleArea(3);
console.log(area);
If you use the function above, you will notice that we get 'undefined' as our result. We have another error. but this one is not showing up in the Console. Put a breakpoint on the line where we use our function. Then refresh the page and this time instead of Step Over use the Step Into button (It will be an arrow pointing down right next to Step Over)
See if you can figure out what is wrong and Fix it.
Once you have solved that there is one more logic error. See if you can find it!

Solution 2
const PI = 3.14;
// let radius = 3;
let area = 0;

function circleArea(radius) {
  const area = radius * radius * PI;
  return area;
}

area = circleArea(3);
console.log("Area1:", area);
// radius = 4;
area = circleArea(4);
console.log("Area2:", area);










